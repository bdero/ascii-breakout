// Generated by CoffeeScript 1.8.0
(function() {
  $(function() {
    var char_width, clear_board, ctx, figlet_font, font_size, height, num, txt, width, _i, _ref;
    $("#canvas")[0].width = document.body.clientWidth;
    $("#canvas")[0].height = document.body.clientHeight;
    console.log(document.body.clientWidth);
    ctx = $("#canvas")[0].getContext("2d");
    width = $("#canvas").width();
    height = $("#canvas").height();
    font_size = 20;
    figlet_font = "doh";
    ctx.font = "" + font_size + "px 'Courier New',Monospace";
    char_width = Math.round(ctx.measureText(".").width);
    txt = "f";
    ctx.fillText("width:" + char_width, 10, 50);
    for (num = _i = 12, _ref = char_width * 100; char_width > 0 ? _i <= _ref : _i >= _ref; num = _i += char_width) {
      ctx.fillText(txt, num, 100);
    }
    clear_board = function() {
      ctx.clearRect(0, 0, width, height);
    };
    return $("#ascii-submit").submit(function(evt) {
      clear_board();
      Figlet.loadFont = function(name, fn) {
        var url;
        url = "fonts/" + name + ".flf";
        return $.ajax({
          url: url,
          datatype: "text",
          success: fn
        });
      };
      Figlet.parseFont(figlet_font, function() {
        var char, char_data, column, column_index, input_string, row, row_index, x_start_pos, xpos, ypos, _j, _k, _l, _len, _len1, _len2, _ref1, _results;
        input_string = $('input[name=gentext]').val();
        x_start_pos = 0;
        _ref1 = input_string.split("");
        _results = [];
        for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
          char = _ref1[_j];
          char_data = Figlet.parseChar(char.charCodeAt(), figlet_font);
          ypos = 0;
          for (row_index = _k = 0, _len1 = char_data.length; _k < _len1; row_index = ++_k) {
            row = char_data[row_index];
            xpos = x_start_pos;
            for (column_index = _l = 0, _len2 = row.length; _l < _len2; column_index = ++_l) {
              column = row[column_index];
              ctx.fillText(column, xpos, ypos);
              xpos += char_width;
            }
            ypos += font_size;
          }
          _results.push(x_start_pos += char_width * char_data[0].length);
        }
        return _results;
      });
      return evt.preventDefault();
    });
  });

}).call(this);
