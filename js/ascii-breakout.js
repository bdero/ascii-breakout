// Generated by CoffeeScript 1.8.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $(function() {
    var cfg, cfg_defaults, clear_board, collision, create_disp_data_with_breaks, create_line_breaks, ctx, disp_board, draw_ascii_ball, draw_paddle, game, game_defaults, game_loop, gen_disp_data, get_color, process_disp_data, showOver, showPaused, showRunning, showSplash, showWin, update_board_cfg;
    $(".select-box label").hover(function() {
      $(this).closest("label").css("z-index", 1);
      $(this).animate({
        height: "30",
        width: "90",
        left: "-=10",
        top: "-=5",
        "padding-top": "+=5",
        "font-size": "+=0"
      }, "fast");
    }, function() {
      $(this).closest("label").css("z-index", 0);
      $(this).animate({
        height: "20",
        width: "70",
        left: "+=10",
        top: "+=5",
        "padding-top": "-=5",
        "font-size": "-=0"
      }, "fast");
    });
    $("input[name=font]:radio").change(function() {
      var font;
      font = $('input[name=font]:checked').val();
      game.figlet_font = font;
      return gen_disp_data($('input[name=str]').val());
    });
    $("input[type=range]").change(function() {
      game.font_size = +$("input[type=range]").val();
      return gen_disp_data($('input[name=str]').val());
    });
    showWin = function() {
      game.state = "win";
      $(".title").html("Hey, looks like you won. Congratulations!");
      $(".actions-paused").hide();
      $(".actions-splash").show();
      return $(".splash").show();
    };
    showRunning = function() {
      $(".splash").hide();
      return game.state = "running";
    };
    showOver = function() {
      game.state = "over";
      game.ball_locked = true;
      $(".title").html("Game Over!");
      $(".actions-paused").hide();
      $(".actions-splash").show();
      return $(".splash").show();
    };
    showPaused = function() {
      game.state = "paused";
      $(".title").html("Game Paused");
      $(".actions-splash").hide();
      $(".actions-paused").show();
      return $(".splash").show();
    };
    showSplash = function() {
      game.state = "splash";
      $(".title").html("Ascii Breakout!");
      $(".actions-paused").hide();
      $(".actions-splash").show();
      return $(".splash").show();
    };
    $(document).click(function(e) {
      switch (game.state) {
        case "running":
          if (game.ball_locked) {
            game.ball_locked = false;
          } else {
            showPaused();
          }
      }
    });
    get_color = function(num) {
      var index;
      index = num % game.ascii_colors.length;
      return game.ascii_colors[index];
    };
    $(document).keydown(function(evt) {
      switch (game.state) {
        case "paused":
          if (evt.keyCode === 27) {
            showRunning();
          }
          break;
        case "running":
          if (evt.keyCode === 27) {
            showPaused();
          }
      }
      if (evt.keyCode === 39) {
        game.right_down = true;
      } else if (evt.keyCode === 37) {
        game.left_down = true;
      }
    });
    $(document).keyup(function(evt) {
      if (evt.keyCode === 39) {
        game.right_down = false;
        game.right_acc = 0;
      } else if (evt.keyCode === 37) {
        game.left_down = false;
        game.left_acc = 0;
      }
    });
    $(document).bind('touchmove mousemove', function(e) {
      var cX;
      switch (game.state) {
        case "running":
          if (e.originalEvent.touches) {
            cX = e.originalEvent.touches[0].pageX;
          } else {
            cX = e.pageX;
          }
          if (cX > game.mouse_min_x && cX < game.mouse_max_x) {
            return game.paddle_x = cX - game.mouse_min_x;
          }
      }
    });
    $('input[name=str]').on('input', function(e) {
      gen_disp_data($('input[name=str]').val());
    });
    $("#ascii-submit").submit(function(e) {
      if ($('input[name=str]').val().length > 1) {
        showRunning();
      }
      e.preventDefault();
    });
    draw_ascii_ball = function(x, y) {
      var i, r, row, _i, _ref;
      ctx.fillStyle = game.paddle_color;
      for (r = _i = 0, _ref = game.ball.rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; r = 0 <= _ref ? ++_i : --_i) {
        row = ((function() {
          var _j, _ref1, _results;
          _results = [];
          for (i = _j = 1, _ref1 = game.ball.cols; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
            _results.push("O");
          }
          return _results;
        })()).join("");
        ctx.fillText(row, x, y + r * game.font_size);
      }
    };
    draw_paddle = function(paddle_x) {
      var i, paddle;
      ctx.fillStyle = game.paddle_color;
      paddle = "[" + ((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = game.paddle.cols - 2; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push("O");
        }
        return _results;
      })()).join("") + "]";
      ctx.fillText(paddle, paddle_x, game.height - game.paddle.h);
    };
    clear_board = function() {
      ctx.clearRect(0, 0, game.width, game.height);
    };
    Figlet.loadFont = function(name, fn) {
      var url;
      url = "fonts/" + name + ".flf";
      return $.ajax({
        url: url,
        datatype: "text",
        success: fn
      });
    };
    gen_disp_data = function(str) {
      Figlet.parsePhrase(str, game.figlet_font, function(disp_data, word_boundaries, space_width) {
        var encoded_font, encoded_font_size, encoded_str;
        game.disp_data = disp_data;
        game.word_boundaries = word_boundaries;
        game.space_width = space_width;
        game.line_breaks = create_line_breaks();
        encoded_str = encodeURI(str);
        encoded_font = encodeURI(game.figlet_font);
        encoded_font_size = encodeURI(game.font_size);
        if (str.length > 0) {
          $(".share-link").html("<a href=\"#" + encoded_str + "/" + encoded_font + "/" + encoded_font_size + "\">Use this link to share this game with a friend!</a>");
        } else {
          $(".share-link").html("");
        }
        return update_board_cfg();
      });
    };
    create_disp_data_with_breaks = function() {
      var column, column_index, line_width, new_disp_data, row, row_index, xpos, _i, _len, _ref, _results;
      new_disp_data = [];
      _ref = game.disp_data;
      _results = [];
      for (row_index = _i = 0, _len = _ref.length; _i < _len; row_index = ++_i) {
        row = _ref[row_index];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (column_index = _j = 0, _len1 = row.length; _j < _len1; column_index = ++_j) {
            column = row[column_index];
            if (__indexOf.call(game.line_breaks, column_index) >= 0) {
              line_cnt += 1;
              if (game.line_breaks.length === line_cnt) {
                line_width = row.length - game.line_breaks[line_cnt - 1];
              } else {
                line_width = game.line_breaks[line_cnt] - game.line_breaks[line_cnt - 1];
              }
              _results1.push(xpos = Math.round((game.width / 2) - (line_width * game.char_width / 2)));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    };
    create_line_breaks = function() {
      var col, index, last_word_boundary, line_breaks, xpos, _i, _len, _ref;
      line_breaks = [];
      if (game.disp_data.length === 0) {
        return line_breaks;
      }
      xpos = 0;
      last_word_boundary = false;
      _ref = game.disp_data[0];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        col = _ref[index];
        xpos += game.char_width;
        if (xpos < game.width) {
          if (__indexOf.call(game.word_boundaries, index) >= 0) {
            last_word_boundary = index;
          }
        } else if (xpos > game.width) {
          if (last_word_boundary) {
            line_breaks.push(last_word_boundary);
            xpos = 0 + game.char_width * (index - last_word_boundary);
            last_word_boundary = false;
          } else {
            line_breaks.push(index);
            xpos = 0;
          }
        }
      }
      return line_breaks;
    };
    collision = function(brick_x, brick_y) {
      var c_brick_x, c_brick_y;
      c_brick_x = brick_x + Math.round(game.char_width / 2);
      c_brick_y = brick_y + Math.round(game.font_size / 2);
      game.aoa = Math.atan2(game.y - c_brick_y, game.x - c_brick_x);
      switch (false) {
        case !(game.aoa <= Math.PI / 4 && game.aoa > -Math.PI / 4):
          if (game.dx <= 0) {
            game.dx = -game.dx;
          }
          break;
        case !(game.aoa <= -Math.PI / 4 && game.aoa > -3 * Math.PI / 4):
          if (game.dy >= 0) {
            game.dy = -game.dy;
          }
          break;
        case !((game.aoa <= -3 * Math.PI && game.aoa > -Math.PI) || (game.aoa <= Math.PI && game.aoa > 3 * Math.PI / 4)):
          if (game.dx >= 0) {
            game.dx = -game.dx;
          }
          break;
        case !(game.aoa <= 3 * Math.PI / 4 && game.aoa > Math.PI / 4):
          if (game.dy <= 0) {
            game.dy = -game.dy;
          }
      }
    };
    process_disp_data = function() {
      var brick_x, brick_y, column, column_index, has_won, line_cnt, line_offset, line_width, printed, row, row_index, xpos, ypos, _i, _j, _len, _len1, _ref;
      has_won = true;
      game.board_disp = {};
      line_offset = game.disp_data.length * game.font_size;
      ypos = game.font_size * 1.1;
      _ref = game.disp_data;
      for (row_index = _i = 0, _len = _ref.length; _i < _len; row_index = ++_i) {
        row = _ref[row_index];
        line_cnt = 0;
        printed = 0;
        if (game.line_breaks.length > 0) {
          line_width = game.line_breaks[0];
        } else {
          line_width = row.length;
        }
        xpos = Math.round((game.width / 2) - (line_width * game.char_width / 2));
        for (column_index = _j = 0, _len1 = row.length; _j < _len1; column_index = ++_j) {
          column = row[column_index];
          if (__indexOf.call(game.line_breaks, column_index) >= 0) {
            line_cnt += 1;
            if (game.line_breaks.length === line_cnt) {
              line_width = row.length - game.line_breaks[line_cnt - 1];
            } else {
              line_width = game.line_breaks[line_cnt] - game.line_breaks[line_cnt - 1];
            }
            xpos = Math.round((game.width / 2) - (line_width * game.char_width / 2));
          }
          brick_x = xpos;
          brick_y = ypos + (line_cnt * (game.font_size * game.disp_data.length));
          if (column !== " ") {
            has_won = false;
            if (!((game.x > brick_x + game.char_width) || (game.x + game.ball.w < brick_x) || (game.y > brick_y + game.font_size) || (game.y + game.ball.h < brick_y))) {
              collision(brick_x, brick_y);
              game.disp_data[row_index][column_index] = " ";
            }
          }
          if (brick_y in game.board_disp) {
            game.board_disp[brick_y] += column;
          } else {
            game.board_disp[brick_y] = column;
          }
          xpos += game.char_width;
        }
        ypos += game.font_size;
      }
      return has_won;
    };
    disp_board = function() {
      var num_rows, row, text_color, xpos, yval, _ref, _results;
      num_rows = 0;
      _ref = game.board_disp;
      _results = [];
      for (yval in _ref) {
        row = _ref[yval];
        xpos = Math.round((game.width / 2) - (row.length * game.char_width / 2));
        text_color = get_color(num_rows);
        ctx.fillStyle = text_color;
        ctx.fillText(row, xpos, +yval);
        _results.push(num_rows += 1);
      }
      return _results;
    };
    game_loop = function() {
      var ball_x, ball_y, won;
      switch (game.state) {
        case "over":
          showOver();
          break;
        case "paused":
          showPaused();
      }
      clear_board();
      won = process_disp_data();
      disp_board();
      if (game.state === "running") {
        if (won && game.disp_data.length > 0) {
          showWin();
        }
        if (!game.paddle_x) {
          game.paddle_x = game.width / 2 - game.paddle.w / 2;
        }
        if (game.ball_locked) {
          ball_x = Math.floor(game.paddle_x + (game.paddle.w / 2) - (game.ball.w / 2));
          ball_y = Math.floor(game.height - game.paddle.h - (game.ball.h + 10));
          game.x = ball_x;
          game.y = ball_y;
        } else {
          ball_x = game.x;
          ball_y = game.y;
        }
        draw_ascii_ball(ball_x, ball_y);
        if (game.right_down) {
          if (game.paddle_x + game.paddle.w < game.width) {
            game.paddle_x += Math.floor(5 + game.right_acc);
            game.right_acc += cfg.acc_rate;
          }
        } else if (game.left_down) {
          if (game.paddle_x > 0) {
            game.paddle_x -= Math.floor(5 + game.left_acc);
            game.left_acc += cfg.acc_rate;
          }
        }
        draw_paddle(game.paddle_x);
        if (game.x + game.ball.w > game.width || game.x < 0) {
          game.dx = -game.dx;
        }
        if (game.y < 0) {
          game.dy = -game.dy;
        } else if (game.y + game.ball.h > (game.height - game.paddle.h)) {
          if (game.x + game.ball.w > game.paddle_x && game.x < (game.paddle_x + game.paddle.w)) {
            game.dy = -game.dy;
          } else {
            if (game.state === "running") {
              showOver();
            }
            game.dy = -game.dy;
          }
        }
        if (!game.ball_locked) {
          game.x += game.dx;
          game.y += game.dy;
        }
      }
    };
    cfg_defaults = {
      font_name: "'Courier New', Monospace",
      default_str: "ascii breakout!!",
      default_font: "standard",
      acc_rate: .5
    };
    game_defaults = {
      dx: 4,
      dy: -8,
      x: 150,
      y: 150,
      right_down: false,
      left_down: false,
      right_acc: 0,
      left_acc: 0,
      state: "splash",
      paddle_color: "#c84848",
      disp_data: [],
      board_disp: {},
      word_boundaries: [],
      space_width: 0,
      line_breaks: [],
      ball: {
        'cols': 3,
        'rows': 2,
        'w': 0,
        'h': 0
      },
      paddle: {
        'cols': 9,
        'rows': 1,
        'w': 0,
        'h': 10
      },
      width: 0,
      height: 0,
      mouse_min_x: 0,
      mouse_max_x: 0,
      aoa: 0,
      ascii_colors: ['#c84848', '#c66c3a', '#b47a30', '#a2a22a', '#48a048', '#4248c8'],
      figlet_font: "standard",
      font_size: 20,
      ball_locked: true
    };
    update_board_cfg = function() {
      $("#canvas")[0].width = Math.floor($(window).width());
      $("#canvas")[0].height = Math.floor($(window).height());
      game.width = $("#canvas").width();
      game.height = $("#canvas").height();
      game.mouse_min_x = $("#canvas").offset().left;
      game.mouse_max_x = game.mouse_min_x + game.width - game.paddle.w;
      ctx.textBaseline = "top";
      ctx.font = "" + game.font_size + "px " + cfg.font_name;
      game.char_width = Math.round(ctx.measureText(".").width);
      game.ball.w = game.ball.cols * game.char_width;
      game.ball.h = game.ball.rows * game.font_size;
      game.paddle.w = game.paddle.cols * game.char_width;
      return game.paddle.h = game.paddle.rows * game.font_size;
    };
    $(window).resize(function() {
      return update_board_cfg();
    });
    ctx = $("#canvas")[0].getContext("2d");
    game = $.extend({}, game_defaults);
    cfg = $.extend({}, cfg_defaults);
    update_board_cfg();
    routie(':str?/:font?/:size?', function(str, font, font_size) {
      var animFrame, canvas, decoded, recursiveAnim;
      if (str) {
        decoded = decodeURI(str);
        $('input[name=str]').val(decoded);
        if (font) {
          game.figlet_font = decodeURI(font);
          if (font_size) {
            game.font_size = +decodeURI(font_size);
          }
        }
        gen_disp_data(decoded);
        showRunning();
      } else {
        $('input[name=str]').val(cfg.default_str);
        game.figlet_font = cfg.default_font;
        gen_disp_data(cfg.default_str);
        showSplash();
      }
      animFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || null;
      if (animFrame !== null) {
        canvas = $("#canvas").get(0);
        recursiveAnim = function() {
          game_loop();
          return animFrame(recursiveAnim, canvas);
        };
        return animFrame(recursiveAnim, canvas);
      } else {
        return setInterval(game_loop, 1000.0 / 60);
      }
    });
  });

}).call(this);
